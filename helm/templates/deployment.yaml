apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helm.fullname" . }}
  labels:
    {{- include "helm.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.initContainers}}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.useLetsEncryptCertificate }}
      initContainers:
        - name: {{printf "init-%s-backend" .Chart.Name }}
          image: alpine/openssl:latest
          command: [ 'sh', '-c', 'until [ -e /cert-manager/tls.key ]; do sleep 5; echo Sleeping for 5 seconds, waiting for cert-manager to finish the certificate negociation; done && openssl rsa -in /cert-manager/tls.key -pubout > /keys/public-key.pem && openssl pkcs8 -topk8 -inform PEM -in /cert-manager/tls.key -out /keys/private-key.key -nocrypt && wget -O /tmp/ca.root https://letsencrypt.org/certs/isrgrootx1.pem && cat /cert-manager/tls.crt /tmp/ca.root > /keys/chain.crt' ]
          volumeMounts:
            - name: key-volume
              mountPath: "/keys"
            - name: cert-manager-volume
              readOnly: true
              mountPath: "/cert-manager"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-frontend
          securityContext:
            {{- toYaml .Values.frontend.securityContext | nindent 12 }}
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag }}"
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.frontend.port }}
              protocol: TCP
          env:
            - name: NEXT_PUBLIC_BACKEND_HOST
              value: {{ (first .Values.ingress.hosts).host }}
          livenessProbe:
            {{- toYaml .Values.frontend.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.frontend.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}
          {{- with .Values.frontend.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        - name: {{ .Chart.Name }}-backend
          image: {{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          {{- if .Values.useLetsEncryptCertificate }}
          command:
            - /bin/sh
            - -c
            - export PUBLIC_KEY=$(cat /keys/public-key.pem) && export PRIVATE_KEY=$(cat /keys/private-key.key) && export CERTIFICATE=$(cat /keys/chain.crt) && HOSTNAME="0.0.0.0" node dist/main
          {{- end }}
          ports:
            - containerPort: {{ .Values.backend.port }}
          env:
            - name: DOMAIN
              value: {{ (first .Values.ingress.hosts).host }}
            - name: EXPIRATION_DAYS
              value: {{ .Values.defaultCredentialExpiration | quote }}
            - name: CERTIFICATE
              {{- if .Values.useLetsEncryptCertificate }}
              valueFrom:
                secretKeyRef:
                  name: {{ (first .Values.ingress.tls).secretName }}
                  key: tls.crt
              {{- else }}
              value: {{ .Values.backend.certificate }}
              {{- end}}
            - name: PRIVATE_KEY_ALGORITHM
              value: {{ .Values.backend.privateKeyAlgorithm }}
          livenessProbe:
            {{- toYaml .Values.backend.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.backend.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          volumeMounts:
          {{- if .Values.useLetsEncryptCertificate }}
            - name: key-volume
              mountPath: "/keys"
          {{- end }}
          {{- with .Values.backend.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
      {{- if .Values.useLetsEncryptCertificate }}
        - name: key-volume
          persistentVolumeClaim:
            claimName: verifiable-credential-playground-volume-claim
        - name: cert-manager-volume
          secret:
            secretName: {{ (first .Values.ingress.tls).secretName }}
      {{- end}}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
